# Напишите класс Trigon, для инициализации передаётся неизвестное кол-во атрибутов

# В классе при инициализации происходит проверка на корректность переданных данных и генерируются следующие исключения:

# 1) Если хотя бы одна сторона передана не числом,
# то падаем с TypeError и текстом 'Стороны должны быть числами'

# 2) Если хотя бы одна сторона передана нулем или отрицательным числом,
# то падаем с ValueError и текстом 'Стороны должны быть положительными'

# 3) Если не соблюдается неравество треугольника,
# то Exception и текст "Не треугольник"

# 4) Если передано не 3 аргумента, то IndexError "Передано {n} аргументов, а ожидается 3", где n - кол-во аргументов

import unittest  # Не удалять


# Здесь пишем код

class Trigon:
    def __init__(self, *args):  # принимает переменное кол-во аргументов и проверяет их на корректность
        if len(args) != 3:  # если кол-во аргументов не 3, то передаем исключение IndexError
            raise IndexError(f"Передано {len(args)} аргументов, а ожидается 3")

        """Если хотя бы одна из сторон не является числом,
        то вызываем исключение TypeError с текстом 'Стороны должны быть числами'. """
        sides = []
        for side in args:
            try:
                side = float(side)
            except ValueError:
                raise TypeError("Стороны должны быть числами")

            """ Если хотя бы одна сторона передана нулем или отрицательным числом"""
            if side <= 0:
                raise ValueError("Стороны должны быть положительными")

            sides.append(side)

        """ Если стороны не соответствуют неравенству треугольника,
        то вызываем исключение Exception с текстом "Не треугольник"""
        sides.sort()
        if sides[0] + sides[1] <= sides[2]:
            raise Exception("Не треугольник")


# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


class MyTestCase(unittest.TestCase):

    def test(self):
        data = [(3, '7', 5), (-3, 7, 5), (2, 5, 2), (3, 4, 5, 6), (3, 4), (3, 4, 5)]

        test_data = [('Стороны должны быть числами', 'TypeError'),
                     ('Стороны должны быть положительными', 'ValueError'),
                     ("Не треугольник", 'Exception'),
                     ("Передано 4 аргументов, а ожидается 3", 'IndexError'),
                     ("Передано 2 аргументов, а ожидается 3", 'IndexError'),
                     0]
        for i, d in enumerate(data):
            try:
                Trigon(*data[i])
            except Exception as e:
                assert e.args[0] == test_data[i][0], 'Исключение имеет неправильный текст'
                assert type(e).__name__ == test_data[i][1], 'У исключения неправильный тип'

        print('Всё ок')


if __name__ == '__main__':
    unittest.main()